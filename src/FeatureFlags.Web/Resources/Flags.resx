<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorDuplicateName" xml:space="preserve">
    <value>Flag with this name already exists.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="FlagsPlural" xml:space="preserve">
    <value>Flags</value>
  </data>
  <data name="FlagLower" xml:space="preserve">
    <value>flag</value>
  </data>
  <data name="ViewAll" xml:space="preserve">
    <value>View All Flags</value>
  </data>
  <data name="EditFlag" xml:space="preserve">
    <value>Edit Flag</value>
  </data>
  <data name="SuccessSavingFlag" xml:space="preserve">
    <value>Flag saved successfully.</value>
  </data>
  <data name="SuccessDeletingFlag" xml:space="preserve">
    <value>Flag deleted successfully.</value>
  </data>
  <data name="MenuItem" xml:space="preserve">
    <value>Flags</value>
  </data>
  <data name="ErrorNameRequired" xml:space="preserve">
    <value>Name is required to create a flag.</value>
  </data>
  <data name="Enable" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="ErrorSavingFlag" xml:space="preserve">
    <value>Error occurred saving flag.</value>
  </data>
  <data name="ErrorDeletingFlag" xml:space="preserve">
    <value>Error occurred deleting flag.</value>
  </data>
  <data name="ConfirmEnable" xml:space="preserve">
    <value>Are you sure you want to enable this flag?</value>
  </data>
  <data name="Disable" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="ConfirmDisable" xml:space="preserve">
    <value>Are you sure you want to disable this flag?</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="SuccessClearingCache" xml:space="preserve">
    <value>Cache cleared successfully.</value>
  </data>
  <data name="ErrorNotFound" xml:space="preserve">
    <value>Feature flag not found.</value>
  </data>
  <data name="CreateFlag" xml:space="preserve">
    <value>Create Flag</value>
  </data>
  <data name="RequirementType" xml:space="preserve">
    <value>Requirement Type</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="ConfirmDeleteFilter" xml:space="preserve">
    <value>Are you sure you want to delete this filter?</value>
  </data>
  <data name="Filters" xml:space="preserve">
    <value>Filters</value>
  </data>
  <data name="FilterIntro" xml:space="preserve">
    <value>Filters are conditions for determining the state of the feature flag.  Flags with no filters will always evaluate to false.  Create at least one filter to enable the flag.</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="PercentageFilter" xml:space="preserve">
    <value>Percentage Filter</value>
  </data>
  <data name="TargetingFilter" xml:space="preserve">
    <value>Targeting Filter</value>
  </data>
  <data name="TimeWindowFilter" xml:space="preserve">
    <value>Time Window Filter</value>
  </data>
  <data name="FilterType" xml:space="preserve">
    <value>Filter Type</value>
  </data>
  <data name="JSONFilter" xml:space="preserve">
    <value>JSON Filter</value>
  </data>
  <data name="JSON" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="Percentage" xml:space="preserve">
    <value>Percentage</value>
  </data>
  <data name="TimeRecurrenceType" xml:space="preserve">
    <value>Repeats</value>
  </data>
  <data name="TimeEnd" xml:space="preserve">
    <value>End Time</value>
  </data>
  <data name="TimeStart" xml:space="preserve">
    <value>Start Time</value>
  </data>
  <data name="ExcludeUsers" xml:space="preserve">
    <value>Exclude Users</value>
  </data>
  <data name="TargetUsers" xml:space="preserve">
    <value>Target Users</value>
  </data>
  <data name="Daily" xml:space="preserve">
    <value>Daily</value>
  </data>
  <data name="Weekly" xml:space="preserve">
    <value>Weekly</value>
  </data>
  <data name="TimeRecurrenceInterval" xml:space="preserve">
    <value>Interval</value>
  </data>
  <data name="TimeRecurrenceFirstDayOfWeek" xml:space="preserve">
    <value>First Day of Week</value>
  </data>
  <data name="TimeRecurrenceRangeType" xml:space="preserve">
    <value>Range Type</value>
  </data>
  <data name="TimeRecurrenceEndDate" xml:space="preserve">
    <value>Range End Date</value>
  </data>
  <data name="TimeRecurrenceNumberOfOccurrences" xml:space="preserve">
    <value>Number of Occurrences</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="RangeTypeNoEnd" xml:space="preserve">
    <value>No End</value>
  </data>
  <data name="RangeTypeEndDate" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="RangeTypeNumbered" xml:space="preserve">
    <value>Numbered</value>
  </data>
  <data name="TimeRecurrenceDaysOfWeek" xml:space="preserve">
    <value>Days of Week</value>
  </data>
  <data name="UserIdentity" xml:space="preserve">
    <value>User (Identity.Name)</value>
  </data>
  <data name="TargetUsersIntro" xml:space="preserve">
    <value>Add users to target.</value>
  </data>
  <data name="ExcludeUsersIntro" xml:space="preserve">
    <value>Add users to exclude.</value>
  </data>
  <data name="ErrorTargetingNoUsers" xml:space="preserve">
    <value>At least one user must be targeted or excluded.</value>
  </data>
  <data name="ErrorTimeWindowEndBeforeStart" xml:space="preserve">
    <value>End date must be after start date.</value>
  </data>
  <data name="ErrorRecurrenceIntervalRequired" xml:space="preserve">
    <value>Interval is required and must be greater than zero.</value>
  </data>
  <data name="ErrorRecurrenceDaysOfWeekRequired" xml:space="preserve">
    <value>At least one day of the week must be selected.</value>
  </data>
  <data name="ErrorRecurrenceFirstDayOfWeekRequired" xml:space="preserve">
    <value>First day of week is required.</value>
  </data>
  <data name="ErrorRecurrenceEndDateRequired" xml:space="preserve">
    <value>Range end date is required.</value>
  </data>
  <data name="ErrorRecurrenceNumberOfOccurrencesRequired" xml:space="preserve">
    <value>Number of occurrences is required.</value>
  </data>
  <data name="ErrorPercentageOutOfRange" xml:space="preserve">
    <value>Percentage is required and must be between 0 and 100.</value>
  </data>
  <data name="ErrorJsonRequired" xml:space="preserve">
    <value>JSON is required.</value>
  </data>
  <data name="ErrorCheckFilters" xml:space="preserve">
    <value>An error occurred validating filters.  Check the filters for details.</value>
  </data>
  <data name="AboutTargeting" xml:space="preserve">
    <value>Use the targeting filter to turn a feature on or off for specific users.  Any user in the target list will evaluate to true.  Any user in the exclude list will evaluate to false. For more complex targeting, use the JSON filter.</value>
  </data>
  <data name="AboutTimeWindow" xml:space="preserve">
    <value>Use the time window filter to turn a feature on or off on a schedule.</value>
  </data>
  <data name="AboutJson" xml:space="preserve">
    <value>Use the JSON filter to create more complex filters than the UI currently allows.  The JSON value will be added to the list of client_filters.</value>
  </data>
  <data name="AboutPercentage" xml:space="preserve">
    <value>Use the percentage filter to turn a feature on or off based on a set percentage. Users will be randomly included based on the percentage.</value>
  </data>
  <data name="ErrorTimeStartOrEndRequired" xml:space="preserve">
    <value>Start time or end time one is required.</value>
  </data>
  <data name="ErrorInvalidFilterConfiguration" xml:space="preserve">
    <value>An error occurred building the feature definition.  Check the filter configuration.</value>
  </data>
  <data name="ErrorJsonInvalidFormat" xml:space="preserve">
    <value>Invalid JSON format.</value>
  </data>
  <data name="ErrorTimeWindowDuration" xml:space="preserve">
    <value>Time window duration cannot be longer than how frequently it occurs or be longer than 10 years.</value>
  </data>
  <data name="ErrorStartDateNotValid" xml:space="preserve">
    <value>Start date is not a valid first occurrence.</value>
  </data>
  <data name="ErrorRecurrrenceEndDateValueOutOfRange" xml:space="preserve">
    <value>The range end date value must be after the start date.</value>
  </data>
  <data name="ErrorEvaluatingFlag" xml:space="preserve">
    <value>Error evaluating status of feature flag.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorTimeWindowEndEqualStart" xml:space="preserve">
    <value>End time cannot equal start time.</value>
  </data>
  <data name="Inactive" xml:space="preserve">
    <value>Inactive</value>
  </data>
</root>